{"version":3,"sources":["TotalData.module.css","StatesData.module.css","axios.js","StatesData.js","request.js","TotalData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","StatesData","fetchUrl","useState","statesData","setstatesData","useEffect","a","get","request","data","fetchData","count","className","sclasses","main","states","map","item","pos","Card","card","key","Header","state","Body","body","Title","confirmed","cchanges","class","cChanges","Text","active","achanges","aChanges","recovered","rchanges","rChanges","deaths","dchanges","dChanges","requests","fetchTotal","fetchStateData","TotalData","title","stateData","setstateData","dclasses","smain","table","innertable","head","small","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.776af306.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"TotalData_table__3v9va\",\"innertable\":\"TotalData_innertable__2jmsp\",\"main\":\"TotalData_main__EkTkc\",\"title\":\"TotalData_title__348O6\",\"smain\":\"TotalData_smain__1o5Ex\",\"small\":\"TotalData_small__2Jxpx\",\"head\":\"TotalData_head__2hQkt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StatesData_card__2eBgj\",\"main\":\"StatesData_main__130yO\",\"states\":\"StatesData_states__1iJAi\",\"cchanges\":\"StatesData_cchanges__2Uyqr\",\"achanges\":\"StatesData_achanges__3lIEn\",\"rchanges\":\"StatesData_rchanges__3pnsg\",\"dchanges\":\"StatesData_dchanges__jOOE_\"};","import axios from \"axios\";\r\n\r\nvar instance = axios.create({\r\n  baseURL: \"https://api.covidindiatracker.com\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport sclasses from \"./StatesData.module.css\";\r\nimport { Card } from \"react-bootstrap\";\r\n//import { Button } from \"react-bootstrap\";\r\nfunction StatesData({ fetchUrl }) {\r\n  const [statesData, setstatesData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setstatesData(request.data);\r\n      // console.table(request.data);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  var count = 1;\r\n  // console.table(statesData.districtData);\r\n\r\n  //var distBtn = statesData.map((item) => {\r\n  //  item.districtData.forEach((element, pos) => {\r\n  //    console.log(element.name);\r\n  //    <Card className={sclasses.card} key={pos}>\r\n  //      <Card.Header>\r\n  //        {count++}.{element.name}\r\n  //      </Card.Header>\r\n  //      <Card.Body>\r\n  //        <Card.Title>\r\n  //          Confirmed Cases:- <br></br>\r\n  //          {element.confirmed}\r\n  //          <div className={sclasses.cchanges}>\r\n  //            (<i class=\"fa fa-arrow-up\"></i>\r\n  //            {element.cChanges})\r\n  //          </div>\r\n  //        </Card.Title>\r\n  //        <Card.Text>\r\n  //          Active Cases:- <br></br>\r\n  //          {element.active}\r\n  //          <div className={sclasses.achanges}>\r\n  //            (<i class=\"fa fa-arrow-up\"></i>\r\n  //            {element.aChanges})\r\n  //          </div>\r\n  //        </Card.Text>\r\n  //        <Card.Text>\r\n  //          Recovered:- <br></br>\r\n  //          {element.recovered}\r\n  //          <div className={sclasses.rchanges}>\r\n  //            (<i class=\"fa fa-arrow-up\"></i>\r\n  //            {element.rChanges})\r\n  //          </div>\r\n  //        </Card.Text>\r\n  //        <Card.Text>\r\n  //          Deaths:- <br></br>\r\n  //          {element.deaths}\r\n  //          <div className={sclasses.dchanges}>\r\n  //            (<i class=\"fa fa-arrow-up\"></i>\r\n  //            {element.dChanges})\r\n  //          </div>\r\n  //        </Card.Text>\r\n  // <Button variant=\"primary\">\r\n  //                 Districts\r\n  //               </Button>\r\n  //      </Card.Body>\r\n  //    </Card>;\r\n  //  });\r\n  //});\r\n\r\n  return (\r\n    <div className={sclasses.main}>\r\n      <div className={sclasses.states}>\r\n        {statesData.map((item, pos) => {\r\n          return (\r\n            <Card className={sclasses.card} key={pos}>\r\n              <Card.Header>\r\n                {count++}.{item.state}\r\n              </Card.Header>\r\n              <Card.Body className={sclasses.body}>\r\n                <Card.Title>\r\n                  Confirmed Cases:- <br></br>\r\n                  {item.confirmed}\r\n                  <div className={sclasses.cchanges}>\r\n                    (<i class=\"fa fa-arrow-up\"></i>\r\n                    {item.cChanges})\r\n                  </div>\r\n                </Card.Title>\r\n                <Card.Text>\r\n                  Active Cases:- <br></br>\r\n                  {item.active}\r\n                  <div className={sclasses.achanges}>\r\n                    (<i class=\"fa fa-arrow-up\"></i>\r\n                    {item.aChanges})\r\n                  </div>\r\n                </Card.Text>\r\n                <Card.Text>\r\n                  Recovered:- <br></br>\r\n                  {item.recovered}\r\n                  <div className={sclasses.rchanges}>\r\n                    (<i class=\"fa fa-arrow-up\"></i>\r\n                    {item.rChanges})\r\n                  </div>\r\n                </Card.Text>\r\n                <Card.Text>\r\n                  Deaths:- <br></br>\r\n                  {item.deaths}\r\n                  <div className={sclasses.dchanges}>\r\n                    (<i class=\"fa fa-arrow-up\"></i>\r\n                    {item.dChanges})\r\n                  </div>\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatesData;\r\n","var requests = {\r\n  fetchTotal: `/total.json`,\r\n  fetchStateData: `/state_data.json`,\r\n};\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport dclasses from \"./TotalData.module.css\";\r\n\r\nfunction TotalData({ title, fetchUrl }) {\r\n  const [stateData, setstateData] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setstateData(request.data);\r\n      // console.table(request.data);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  //function thousands_separators() {\r\n  //  var num_parts = stateData.confirmed.toString().split(\".\");\r\n  //  num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  //  return num_parts.join(\".\");\r\n  //}\r\n\r\n  return (\r\n    <div className={dclasses.main}>\r\n      <div className={dclasses.smain}>\r\n        <h1 className={dclasses.title}>{title}</h1>\r\n        <div>\r\n          <td className={dclasses.table}>\r\n            <td className={dclasses.innertable}>\r\n              <td className={dclasses.head}>TotalCases:</td>\r\n              <tr>\r\n                {stateData.confirmed}\r\n                <br></br>\r\n                <div className={dclasses.small}>\r\n                  (<i class=\"fa fa-arrow-up\"></i>\r\n                  {stateData.cChanges})\r\n                </div>\r\n              </tr>\r\n            </td>\r\n            <td className={dclasses.innertable}>\r\n              <td className={dclasses.head}>Recovered:</td>\r\n              <tr>\r\n                {stateData.recovered}\r\n                <br></br>\r\n                <div className={dclasses.small}>\r\n                  (<i class=\"fa fa-arrow-up\"></i>\r\n                  {stateData.rChanges})\r\n                </div>\r\n              </tr>\r\n            </td>\r\n            <td className={dclasses.innertable}>\r\n              <td className={dclasses.head}>Deaths:</td>\r\n              <tr>\r\n                {stateData.deaths}\r\n                <br></br>\r\n                <div className={dclasses.small}>\r\n                  (<i class=\"fa fa-arrow-up\"></i>\r\n                  {stateData.dChanges})\r\n                </div>\r\n              </tr>\r\n            </td>\r\n            <td className={dclasses.innertable}>\r\n              <td className={dclasses.head}>Active:</td>\r\n              <tr>\r\n                {stateData.active}\r\n                <br></br>\r\n                <div className={dclasses.small}>\r\n                  (<i class=\"fa fa-arrow-up\"></i>\r\n                  {stateData.aChanges})\r\n                </div>\r\n              </tr>\r\n            </td>\r\n          </td>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TotalData;\r\n","import React from \"react\";\nimport StatesData from \"./StatesData\";\nimport requests from \"./request\";\nimport \"./App.css\";\nimport TotalData from \"./TotalData\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TotalData\n        title=\"CoronaVirus Stats India\"\n        fetchUrl={requests.fetchTotal}\n      />\n      <StatesData fetchUrl={requests.fetchStateData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}